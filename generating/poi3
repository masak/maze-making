# bitstring; positions 0..5 correspond to vertical walls; 6..11 to horizontal;
# RAKUDO: can't do `0 x 12` here: RT #123602
my @old = "000000000000";

#   00  01
# 06  07  08
#   02  03
# 09  10  11
#   04  05

# 0..3 represent the four internal corner points; 4 represents the outer wall
my @points =
    # vertical walls 0..5
    [0, 4], [1, 4],
    [0, 2], [1, 3],
    [2, 4], [3, 4],
    # horizontal walls 6..11
    [0, 4], [0, 1], [1, 4],
    [2, 4], [2, 3], [3, 4],
;

my %symmetries =
    id   => 0..11,
    rot1 => <8 11 7 10 6 9 1 3 5 0 2 4>,
    rot2 => <5 4 3 2 1 0 11 10 9 8 7 6>,
    rot3 => <9 6 10 7 11 8 4 2 0 5 3 1>,
    flip => <4 5 2 3 0 1 9 10 11 6 7 8>,
    frt1 => <6 9 7 10 8 11 0 2 4 1 3 5>,
    frt2 => <1 0 3 2 5 4 8 7 6 11 10 9>,
    frt3 => <11 8 10 7 9 6 5 3 1 4 2 0>,
;

sub p($s, $n) { $s.substr($n, 1) }
sub ch($s, $n) { $s.substr(0, $n) ~ "1" ~ $s.substr($n + 1) }

for 1..4 {
    my %new;
    for @old -> $s {
        my @active = False xx 4, True;
        for ^12 -> $n {
            next unless p($s, $n);
            @active[@points[$n][0]] = True;
            @active[@points[$n][1]] = True;
        }
        for ^12 -> $n {
            next if p($s, $n);
            my @p = @points[$n].list;
            if @active[@p[0]] != @active[@p[1]] {
                my @w = ch($s, $n).comb;
                my $min = [min] (@w[%symmetries{$_}.list].join for %symmetries.keys);
                %new{$min}++;
            }
        }
    }

    @old = %new.keys;
    note +@old;
}

.say for @old.sort;
